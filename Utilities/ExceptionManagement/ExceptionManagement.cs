#region Included namespaces
// <auto-generated/> - Added to exclude style cop
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using KeyVault.Interfaces;
using Utilities.Interfaces;
#endregion

namespace Utilities.ExceptionManagement
{
    /// <summary>
    /// ExceptionManagement
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class ExceptionManagement<T> ////: ILog<T>
    {
        /// <summary>
        /// _IKeyValueProvider
        /// </summary>
        private readonly IKeyValueProvider _IKeyValueProvider;

        #region Constructor
        /// <summary>
        /// ExceptionManagement Constructor
        /// </summary>
        /// <param name="keyValueProvider"></param>
        public ExceptionManagement(IKeyValueProvider keyValueProvider)
        {
            _IKeyValueProvider = keyValueProvider;
        }
        #endregion

        #region WriteLog
        /// <summary>
        /// Write Log entries by various methods
        /// </summary>
        /// <param name="model"></param>
        public async Task WriteLog(T model)
        {
            ExceptionLog logModel = null;

            if (model != null)
            {
                logModel = (ExceptionLog)Convert.ChangeType(model, typeof(ExceptionLog));
            }

            try
            {
                string locationPath = Path.GetFullPath(_IKeyValueProvider.GetValues("ErrorLog"));

                if (!Directory.Exists(locationPath))
                {
                    // This path is a directory
                    Directory.CreateDirectory(locationPath);
                }

                string fileName = string.Format("ErrorLog_{0:ddMMMyyyy}.txt", DateTime.Today);
                string fullMessage = string.Format("\n ======START====== \n Exception \n ");
                string exceptionStackTrace = "";

                if (logModel.ExceptionMessage != "")
                {
                    fullMessage += logModel.ExceptionMessage;
                }

                using (FileStream objFile = new FileStream(Path.Combine(locationPath, fileName), FileMode.Append))
                {
                    string seperateError = string.Format(" \n ======END====== \n ");

                    if (logModel.ExceptionMessage != null)
                    {
                        exceptionStackTrace = (logModel.Exception.StackTrace ?? string.Empty) + "\n" +
                            (logModel.Exception.InnerException != null ? (logModel.Exception.InnerException.Message ?? string.Empty) + "\n" + (logModel.Exception.InnerException.StackTrace ?? string.Empty) : string.Empty);

                        fullMessage += string.Format(
                            "\n Exception : {0}\n ExceptionDetails{1} \n ExceptionTime : {2} \n {3} \n ",
                            logModel.Exception.Message, exceptionStackTrace,
                            DateTime.Now.ToLongTimeString(),
                            seperateError);

                        // Get stack trace for the exception with source file information
                        var st = new System.Diagnostics.StackTrace(logModel.Exception, false);
                        if (st != null)
                        {
                            // Get the top stack frame
                            var frame = st.GetFrame(0);
                            if (frame != null)
                            {
                                // Get the line number from the stack frame
                                var line = frame.GetFileLineNumber();

                                if (line > 0)
                                {
                                    fullMessage += "\n Error LineNumber : " + line;
                                }
                            }
                        }

                        StreamWriter objStreamWriter = new StreamWriter(objFile);
                        await objStreamWriter.WriteLineAsync(fullMessage);
                        objStreamWriter.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                throw new ArgumentNullException("With in SaveException method :", ex.InnerException);
            }
        }
        #endregion WriteLog

        /// <summary>
        /// Information
        /// </summary>
        /// <param name="message"></param>
        public void Information(string message)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Warning
        /// </summary>
        /// <param name="message"></param>
        public void Warning(string message)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Debug
        /// </summary>
        /// <param name="message"></param>
        public void Debug(string message)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Error
        /// </summary>
        /// <param name="message"></param>
        public void Error(string message)
        {
            throw new NotImplementedException();
        }
    }
}
